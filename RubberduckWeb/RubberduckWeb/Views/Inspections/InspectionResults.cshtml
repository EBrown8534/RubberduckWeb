@using RubberduckWeb.Controllers

@{
    ViewBag.Title = "InspectionResults";
}

@using Rubberduck.Inspections
@using Rubberduck.Inspections.Resources
@model List<Rubberduck.Inspections.Abstract.IInspectionResult>
@{
    var severityIconUrls = new Dictionary<CodeInspectionSeverity, string>
    {
        { CodeInspectionSeverity.Error, "/Content/Images/Error.png" },
        { CodeInspectionSeverity.Warning, "/Content/Images/Warning.png" },
        { CodeInspectionSeverity.Suggestion, "/Content/Images/Suggestion.png" },
        { CodeInspectionSeverity.Hint, "/Content/Images/Hint.png" }
    };
}

<h3>Results</h3>
<table class="inspection-results-table">
    <tbody>
        <tr>
            <th>Severity</th>
            <th>Inspection Name</th>
            <th>Description</th>
            <th>Reasoning</th>
            <th>Location</th>
        </tr>
        @if (Model != null)
        {
            if (Model.Count > 0)
            {
                foreach (var item in Model.OrderBy(o => o.QualifiedSelection.Selection.StartLine)
                                       .ThenBy(t => t.QualifiedSelection.Selection.StartColumn))
                {
                    <tr>
                        <td width="50"><img alt="@item.Inspection.Severity" src="@severityIconUrls[item.Inspection.Severity]" /></td>
                        <td>@Html.ActionLink(InspectionsController.FormatInspectionName(item.Inspection), "Details", new { id = item.Inspection.Name })</td>
                        <td>@item.Description</td>
                        <td>@item.Inspection.Meta</td>
                        <td>@string.Format("L{0}C{1}", item.QualifiedSelection.Selection.StartLine, item.QualifiedSelection.Selection.StartColumn)</td>
                    </tr>
                }
            }
            else
            {
                <tr><th colspan="5" class="text-center alert alert-success no-round-corners">No issues were found</th></tr>
            }
            <tr>
                <td colspan="5" class="alert alert-warning no-round-corners">
                    Note: Inspection results may differ when Rubberduck is running in the Visual Basic Editor (VBE) IDE, where
                    referenced type libraries (VBA Standard library, Excel object model, etc.) are used by the resolver. Soon
                    we'll serialize the declarations we're extracting from the most commonly used type libraries, to improve
                    this online experience (experiment?). Some inspections are also explicitly excluded. If you feel that you
                    have gotten certain inspection results in error, feel free to view
                    <a href="https://github.com/rubberduck-vba/Rubberduck/issues?q=is%3Aopen+is%3Aissue+label%3Acode-inspections">open issues regarding inspections</a>,
                    and if you don't find one you like
                    <a href="https://github.com/rubberduck-vba/Rubberduck/issues/new">feel free to add it</a>.
                </td>
            </tr>
        }
        else
        {
            <tr>
                <th colspan="5" class="text-center alert alert-danger no-round-corners">
                    Rubberduck failed to parse your code. Please check the input and try again. If you feel that you
                    have gotten this parser response in error, feel free to view
                    <a href="https://github.com/rubberduck-vba/Rubberduck/issues?q=is%3Aopen+is%3Aissue">open issues</a>,
                    and if you don't find one that refers to this problem
                    <a href="https://github.com/rubberduck-vba/Rubberduck/issues/new">go ahead and add it</a>.
                </th>
            </tr>
        }
    </tbody>
</table>
