@{
    ViewBag.Title = "InspectionResults";
}

@using Rubberduck.Inspections
@model List<ICodeInspectionResult>
@{
    var severityIconUrls = new Dictionary<CodeInspectionSeverity, string>
    {
        { CodeInspectionSeverity.Error, "/Content/Images/Error.png" },
        { CodeInspectionSeverity.Warning, "/Content/Images/Warning.png" },
        { CodeInspectionSeverity.Suggestion, "/Content/Images/Suggestion.png" },
        { CodeInspectionSeverity.Hint, "/Content/Images/Hint.png" }
    };
}
<div class="row">
    <table class="inspection-results-table">
        <tbody>
        <tr>
            <th>Severity</th>
            <th>Description</th>
            <th>Reasoning</th>
            <th>Location</th>
        </tr>
            @if(Model != null)
            {
                foreach (var item in Model.OrderBy(o => o.QualifiedSelection.Selection.StartLine)
                                       .ThenBy(t => t.QualifiedSelection.Selection.StartColumn))
                {
                    <tr>
                        <td width="50"><img alt="@item.Inspection.Severity" src="@severityIconUrls[item.Inspection.Severity]"/></td>
                        <td>@item.Description</td>
                        <td>@item.Inspection.Meta</td>
                        <td>@string.Format("L{0}C{1}", item.QualifiedSelection.Selection.StartLine, item.QualifiedSelection.Selection.StartColumn)</td>
                    </tr>
                }
                <tr>Note: Inspection results may differ when Rubberduck is running in the Visual Basic Editor (VBE) IDE, where referenced type libraries (VBA Standard library, Excel object model, etc.) are used by the resolver. Soon we'll serialize the declarations we're extracting from the most commonly used type libraries, to improve this online experience (experiment?). Some inspections are also explicitly excluded.</tr>
            }
        </tbody>
    </table>
</div>
