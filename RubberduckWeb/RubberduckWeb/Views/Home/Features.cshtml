
@{
    ViewBag.Title = "Features";
}

<div class="lead">
    <h2>Features</h2>

    <p>There's quite a lot to cover here, and it's constantly evolving. Here's a little overview, as of version 1.4.</p>
</div>
<section id="navigation">
    <h3>Navigation</h3>
    <div class="row">
        <div class="col-md-4">
            <h4>Code Explorer</h4>
            <p>is a bit like the Project Explorer, except it drills down to module members and can display member signatures.</p>
            <img src="~/Content/Images/CodeExplorer.png" />
        </div>
        <div class="col-md-4">
            <h4>Find all references</h4>
            <p>to any procedure, parameter, variable, constant, enum, library function, line label, even built-in identifiers.</p>
            <img src="~/Content/Images/FindAllReferences.png" />
        </div>
        <div class="col-md-4">
            <h4>ToDo Explorer</h4>
            <p>finds configurable markers in comments, and regroups them all in one convenient place.</p>
            <img src="~/Content/Images/TodoExplorer.png" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <h4>Go to implementation</h4>
            <p>finds all implementations of interface members. If you're coding against abstractions, this feature is priceless.</p>
            <img src="~/Content/Images/GoToImplementation.png" />
        </div>
        <div class="col-md-4">
            <h4>Find symbol</h4>
            <p>lets you search for literally anything, literally anywhere. From procedures to parameters, locals to globals, constants, enums and their members, user-defined types and their members, modules, classes, forms, line labels, and probably other things I'm forgetting</p>
        </div>
        <div class="col-md-4">
            <img src="~/Content/Images/FindSymbol.png" />
        </div>
    </div>
</section>
<section id="unitTesting">
    <h3>
        Unit Testing <small>This feature is unfortunately not available for all application hosts.</small>
    </h3>
    <div class="row">
        <div class="col-md-6">
            <img src="~/Content/Images/TestRunner_Large.png" />
        </div>
        <div class="col-md-6">
            <p>
                <strong>You're not dreaming.</strong> Rubberduck's testing API gives you an <em>Assert</em> class that lets you write <em>Arrange-Act-Assert</em> unit tests just like you would in a modern-day IDE.
            </p>
            <p>Use &#64;TestInitialize and &#64;TestCleanup methods to reduce test initialization code, and &#64;ModuleInitialize and &#64;ModuleCleanup markers to initialize fields available to all tests in a module.</p>
        </div>
    </div>
</section>
<section id="codeInspections">
    <h3>Code Inspections</h3>
    <p>Most code inspections propose at least one quick fix that can be applied with a single click. Severity levels range from DoNotShow to Error and is completely configurable, for every single inspection.</p>
    <img src="~/Content/Images/CodeInspections_Large.png" />
    <div class="row">
        <div class="col-md-4">
            <h4>Code Quality Issues</h4>
            <ul>
                <li>Option Explicit not set</li>
                <li>Locate unused declarations</li>
                <li>Functions returning an implicit Variant</li>
                <li>Parameters implicitly passed by reference</li>
                <li>Unassigned variables</li>
                <li>Functions without an assigned return value</li>
            </ul>
        </div>
        <div class="col-md-4">
            <h4>Language Opportunities</h4>
            <ul>
                <li>Use of obsolete&nbsp;<em>Call&nbsp;</em>statements</li>
                <li>Use of obsolete&nbsp;<em>Global</em>&nbsp;modifier</li>
                <li>Use of obsolete <em>Let&nbsp;</em>statement&nbsp;</li>
                <li>Use of obsolete&nbsp;<em>Rem&nbsp;</em>statement</li>
                <li>Use of type hints</li>
            </ul>
        </div>
        <div class="col-md-4">
            <h4>Maintainability/Readability</h4>
            <ul>
                <li>Multiple declarations in instruction</li>
                <li>Parameter declared on multiple lines</li>
                <li>Confusing implicit array lower bound (Option Base 1)</li>
                <li>Unnamed project</li>
            </ul>
        </div>
    </div>
    <p>...and many more on the roadmap!</p>
</section>
<section id="refactorings">
    <h3>Refactorings</h3>
    <div class="row">
        <div class="col-md-6">
            <h4>Extract Method</h4>
            <p>You're facing a long method that's doing way too many things. Splitting it up manually is tedious, and risky. With this feature you select the code you want to extract out of a method, and Rubberduck converts it to a method call for you.</p>
        </div>
        <div class="col-md-6">
            <img src="~/Content/Images/ExtractMethod.png" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Rename</h4>
            <p>
                You've inherited a code base crippled with single-letter identifiers used just about everywhere? This feature isn't a&nbsp;<em>Find/Replace -&nbsp;</em>it locates every reference to the target identifier within the active project, and&nbsp;<em>replaces the token&nbsp;</em>with a new identifier name. <em>Naming is hard</em>; renaming is easy.
            </p>
        </div>
        <div class="col-md-6">
            <img src="~/Content/Images/Rename.png" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Remove Parameter(s)</h4>
            <p>A procedure called in 12 places needs to change, and the new version no longer needs one of the parameters? This refactoring will remove it from the signature, and from every call site as well.</p>
        </div>
        <div class="col-md-4">
            <img src="~/Content/Images/RemoveParameters.png" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <h4>Reorder Parameters</h4>
            <p>Sometimes you come across this utility function that's used just about everywhere, that has this annoying first parameter that would be so much better specified last. This refactoring lets you change the order of the&nbsp;parameters in a signature, and automatically adjust all call sites.</p>
        </div>
        <div class="col-md-6">
            <img src="~/Content/Images/ReorderParameters.png" />
        </div>
    </div>
    <p>...and many more on the roadmap!</p>
</section>
<section id="git">
    <h3>
        Git Source Control <small>Coming in Rubberduck 2.0 - Stay tuned!</small>
    </h3>
    <p>Powered by <a href="https://github.com/libgit2/libgit2sharp" target="_blank">LibGit2Sharp</a>, you can now create a local or remote git repository (including GitHub!) and commit, push and pull changes, and create, switch and merge branches... directly from a docked toolwindow in the VBE.in</p>
    <p>Version 1.4 includes this feature as a beta / feature preview.</p>
</section>
<section id="indenter">
    <h3>
        Smart Indentation <small>Coming in Rubberduck 2.0 - Stay tuned!</small>
    </h3>
    <p>The original author and current maintainer of the popular&nbsp;<strong><a href="http://www.oaltd.co.uk/indenter/indentpage.asp" target="_blank">Smart Indenter</a>&nbsp;</strong>add-in have graciously offered the latest version of their source code to the Rubberduck project. Thanks to Rob Bovey and Stephen Bullen, Rubberduck 2.0 will have the smartest automagic indentation built-in.</p>
</section>


