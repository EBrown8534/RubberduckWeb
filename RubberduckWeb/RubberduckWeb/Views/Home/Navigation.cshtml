
@{
    ViewBag.Title = "Navigation";
}

<section id="navigation">
    <div class="image-div col-md-push-4">
        <img class="image" />
    </div>
    <h3>Navigation</h3>
    <div class="row">
        <div class="col-lg-6">
            <h4>Code Explorer</h4>
            <img alt="Code Explorer" src="~/Content/Images/CodeExplorer-small.png" onclick="$displayImage('/Content/Images/CodeExplorer.png')" class="col-lg-6"/>
            <p class="col-lg-6">The Code Explorer is a full replacement for the Project Explorer&mdash;only better.
                It has all the old features, such as importing, exporting, and removing (only our import allows you to
                import multiple modules, unlike the Project Explorer), and some new ones, such as indenting a procedure,
                module, all modules in a folder, or all modules in a project. It also sports Commit and Undo commands to
                open the Source Control panel and commit or undo all changes in a tracked file without needed to open the
                Source Control panel.
            </p>
        </div>

        <div class="col-lg-6">
            <h4>Todo Explorer</h4>
            <img alt="Todo Explorer" src="~/Content/Images/TestExplorer-small.png" onclick="$displayImage('/Content/Images/TestExplorer.png')" class="col-lg-6" />
            <p class="col-lg-6">
                The Test Explorer helps you create, run, and manage unit tests with minimal boilerplate.
                Just add a test module and test stub through the UI, write your test using Rubberduck's
                <em>Assert</em> and <em>PermissiveAssert</em> classes, and run it. Procedures marked
                with the <em>'&amp;ModuleInitialize</em> and <em>'&amp;ModuleCleanup</em> annotations run
                before and after the tests in a module are run, and methods marked with the
                <em>'&amp;TestInitialize</em> and <em>'&amp;TestCleanup</em> annotations run before and after each test.
                Tests are marked with the <em>'&amp;TestMethod</em> annotation, ignore tests are marked with the
                <em>'&amp;IgnoreTest</em> annotation, and the module as a whole is marked with the <em>'&amp;TestModule</em> annotation.
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <h4>Find all references</h4>
            <p>to any procedure, parameter, variable, constant, enum, library function, line label, even built-in identifiers.</p>
            <img src="~/Content/Images/FindAllReferences.png" />
        </div>
        <div class="col-md-4">
            <h4>Go to implementation</h4>
            <p>finds all implementations of interface members. If you're coding against abstractions, this feature is priceless.</p>
            <img src="~/Content/Images/GoToImplementation.png" />
        </div>
        <div class="col-md-4">
            <h4>Find symbol</h4>
            <p>lets you search for literally anything, literally anywhere. From procedures to parameters, locals to globals, constants, enums and their members, user-defined types and their members, modules, classes, forms, line labels, and probably other things I'm forgetting</p>
        </div>
        <div class="col-md-4">
            <img src="~/Content/Images/FindSymbol.png" />
        </div>
    </div>
</section>