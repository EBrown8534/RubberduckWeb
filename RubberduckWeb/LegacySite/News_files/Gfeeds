/* callback */google.feeds.Feed.RawCompletion('0', {"feed":{"feedUrl":"http://rubberduckvba.wordpress.com/feed","title":"Rubberduck News","link":"https://rubberduckvba.wordpress.com","author":"","description":"Every programmer needs a Rubberduck","type":"rss20","entries":[{"mediaGroups":[{"contents":[{"url":"https://1.gravatar.com/avatar/a5013bc73b8dd1b7712d7e2a7a4feaea?s\u003d96\u0026d\u003didenticon\u0026r\u003dG","medium":"image","title":"rubberduckvba"}]}],"title":"OOP in VBA: Immutability \u0026 The Factory Pattern","link":"https://rubberduckvba.wordpress.com/2016/01/11/oop-in-vba-immutability-the-factory-pattern/","author":"rubberduckvba","publishedDate":"Sun, 10 Jan 2016 16:18:30 -0800","contentSnippet":"If you\u0026#8217;ve ever exported a VBA class module and opened it in Notepad, you\u0026#8217;ve probably already seen this: VERSION 1.0 ...","content":"\u003cp\u003eIf you’ve ever exported a VBA class module and opened it in Notepad, you’ve probably already seen this:\u003cbr\u003e\nVERSION 1.0 CLASS\u003cbr\u003e\nBEGIN\u003cbr\u003e\nMultiUse \u003d -1 ‘True\u003cbr\u003e\nEND\u003cbr\u003e\nAttribute VB_Name \u003d “Class1”\u003cbr\u003e\nAttribute VB_GlobalNameSpace \u003d False\u003cbr\u003e\nAttribute VB_Creatable \u003d False\u003cbr\u003e\nAttribute VB_PredeclaredId \u003d False\u003cbr\u003e\nAttribute VB_Exposed \u003d False\u003c/p\u003e\n\u003cp\u003eThese attributes unlock the true OOP potential of VBA.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVB_PredeclaredId\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eYou know how every UserForm comes with a “default instance” for free? That’s because user forms have this attribute set to True, and that instructs VBA to create a global-scope object named after the type, so you can do this:\u003c/p\u003e\n\u003cpre\u003eMyForm.Show vbModal\u003c/pre\u003e\n\u003cp\u003eWithout even creating an instance of MyForm. That’s not very OOP though – in fact it’s pretty much \u003cem\u003eanti-OOP\u003c/em\u003e, since by doing that you’re not creating any objects… So what’s the use of this attribute in an OOP discussion? Keep reading.\u003c/p\u003e\n\u003cp\u003eVBA classes are \u003cem\u003ePublic, not creatable\u003c/em\u003e. This means when you reference a VBA project, you can see and use the classes in that project, \u003cem\u003ebut you can’t create instances of them\u003c/em\u003e. You need a way to expose functionality to the referencing VBA project, to return instances of such a class. Oh sure, you could add a standard module and expose a public function that does it – but standard modules don’t quite encapsulate their members, and it’s up to the client code to properly qualify function calls (e.g. FactoryModule.CreateMyClass). A better option is to create a dedicated object whose sole responsibility is to create objects of a given type – enter the \u003cem\u003efactory patern\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIn OOP design patterns, factories are often combined with the \u003cem\u003eSingleton\u003c/em\u003e pattern – after all, there only ever needs to be \u003cem\u003eone single instance\u003c/em\u003e of a factory class. Given that the class can’t be created by the client code with the \u003cem\u003eNew \u003c/em\u003ekeyword, that’s precisely what setting the VB_PredeclaredId attribute to True will do.\u003c/p\u003e\n\u003ch3\u003eExample\u003c/h3\u003e\n\u003cp\u003eSay you have a Car class, with Make, Model and Manufacturer properties. It wouldn’t make sense for any of these properties to be changed after they’re set, right?\u003c/p\u003e\n\u003cpre\u003ePrivate Type TCar\n    Make As Integer\n    Model As String\n    Manufacturer As String\nEnd Type\n \nPrivate this As TCar\u003c/pre\u003e\n\u003cpre\u003ePublic Property Get Model() As String\n    Model \u003d this.Model\nEnd Property\n \nFriend Property Let Model(ByVal value As String)\n    this.Model \u003d value\nEnd Property\n \n'...other properties\u003c/pre\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eFriend \u003c/em\u003eaccess modifier makes the Model property \u003cem\u003eimmutable\u003c/em\u003e, because client code located outside the VBA project this Car class is defined in, simply won’t see the \u003cem\u003eProperty Let \u003c/em\u003emember. However a \u003cem\u003eCarFactory\u003c/em\u003e class defined in the same VBA project can:\u003c/p\u003e\n\u003cpre\u003e Public Function Create(ByVal carMake As Integer, ByVal carModel As String, ByVal carManufacturer As String) As Car\n     Dim result As New Car\n     result.Make \u003d carMake\n     result.Model \u003d carModel\n     result.Manufacturer \u003d carManufacturer\n     Set Create \u003d result\n End Function\u003c/pre\u003e\n\u003cp\u003eBecause this \u003cem\u003eCarFactory \u003c/em\u003eclass has a \u003cem\u003ePredeclaredId\u003c/em\u003e, the referencing VBA code can do this:\u003c/p\u003e\n\u003cpre\u003e Dim myCar As Car\n Set myCar \u003d CarFactory.Create(2016, \"Civic\", \"Honda\")\u003c/pre\u003e\n\u003cp\u003eAnd then the \u003cem\u003emyCar \u003c/em\u003eobject can’t be turned into a 2014 Honda Fit – not even by accident.\u003c/p\u003e\n\u003cp\u003eFuture versions of Rubberduck will make it easy to set a class’ \u003cem\u003ePredeclaredId\u003c/em\u003e attribute, and might actually provide tools to automate the creation of factories.\u003c/p\u003e\n\u003ch3\u003e\u003c/h3\u003e\u003cbr\u003e  \u003ca rel\u003d\"nofollow\" href\u003d\"http://feeds.wordpress.com/1.0/gocomments/rubberduckvba.wordpress.com/424/\"\u003e\u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"http://feeds.wordpress.com/1.0/comments/rubberduckvba.wordpress.com/424/\"\u003e\u003c/a\u003e \u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"https://pixel.wp.com/b.gif?host\u003drubberduckvba.wordpress.com\u0026amp;blog\u003d86116679\u0026amp;post\u003d424\u0026amp;subd\u003drubberduckvba\u0026amp;ref\u003d\u0026amp;feed\u003d1\" width\u003d\"1\" height\u003d\"1\"\u003e","categories":["tutorials","vba"]},{"mediaGroups":[{"contents":[{"url":"https://1.gravatar.com/avatar/a5013bc73b8dd1b7712d7e2a7a4feaea?s\u003d96\u0026d\u003didenticon\u0026r\u003dG","medium":"image","title":"rubberduckvba"}]}],"title":"OOP in VBA?","link":"https://rubberduckvba.wordpress.com/2015/12/24/oop-in-vba/","author":"rubberduckvba","publishedDate":"Wed, 23 Dec 2015 23:40:47 -0800","contentSnippet":"VBA is an Object-Oriented language\u0026#8230; \u0026#8230;whether we agree or not. Object-Oriented Programming (OOP) is really all about ...","content":"\u003ch2\u003eVBA is an \u003cem\u003eObject-Oriented\u003c/em\u003e language…\u003c/h2\u003e\n\u003ch3\u003e\u003cem\u003e…whether we agree or not.\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eObject-Oriented Programming (OOP) is really all about 4 little things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAbstraction\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEncapsulation\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePolymorphism\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInheritance\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo make things clear: \u003cstrong\u003ethere’s no inheritance in VBA\u003c/strong\u003e. \u003cem\u003eBut it doesn’t matter\u003c/em\u003e, because we can easily compensate with \u003cem\u003ecomposition\u003c/em\u003e, which is often a better design decision, even in languages that support class inheritance.\u003c/p\u003e\n\u003cp\u003eThe key to OOP, is \u003cem\u003eclasses\u003c/em\u003e. Why? Because classes are a blueprint for \u003cem\u003eobjects\u003c/em\u003e, …which are \u003cem\u003ekinda\u003c/em\u003e the whole point of OOP.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch3\u003eAbstraction\u003c/h3\u003e\n\u003cp\u003eIf you’ve been writing code, you’ve been making \u003cem\u003eabstractions\u003c/em\u003e. A procedure is \u003cem\u003eabstracting\u003c/em\u003e a series of executable operations; a module abstracts a group of related operations, even variables are an abstraction, abstracting the result of an operation\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOr is that too abstract?\u003c/p\u003e\n\u003ch4\u003e\u003cem\u003eLevels of abstraction\u003c/em\u003e\u003c/h4\u003e\n\u003cp\u003eIf you think of the steps required to, say, make coffee, you might think of something like this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMake sure there’s water in the coffee maker\u003c/li\u003e\n\u003cli\u003eMake sure there’s coffee in the coffee maker\u003c/li\u003e\n\u003cli\u003eStart the coffee maker\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThat would certainly make coffee, right?\u003c/p\u003e\n\u003cp\u003eWhat sub-steps could there be to \u003cem\u003emake sure there’s water in the coffee maker\u003c/em\u003e? And to \u003cem\u003emake sure there’s coffee in the coffee maker\u003c/em\u003e? Or even to \u003cem\u003estart the coffee maker\u003c/em\u003e? These sub-steps are \u003cem\u003eat a lower level of abstraction\u003c/em\u003e than the 3 higher-level ones.\u003c/p\u003e\n\u003cp\u003eClean code operates on a single level of abstraction, and calls into more and more specialized code: notice we don’t care where the water compartment is at the higher levels.\u003c/p\u003e\n\u003cp\u003eThat’s why we put the public members at the top: because they’re at a higher level of abstraction than the private members they’re calling.\u003c/p\u003e\n\u003cp\u003eClasses are an important abstraction: they define \u003cem\u003eobjects\u003c/em\u003e, which \u003cem\u003eencapsulate \u003c/em\u003edata and expose methods to operate on it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003eEncapsulation\u003c/h3\u003e\n\u003cp\u003eSimilar to abstraction, encapsulation abstracts away implementation details, exposing only what \u003cem\u003eother code \u003c/em\u003eneeds to work with.\u003c/p\u003e\n\u003cp\u003eGlobal variables are pretty much the opposite of encapsulation; and if you have a public field in a class module, you’re not \u003cem\u003eencapsulating\u003c/em\u003e your data.\u003c/p\u003e\n\u003cp\u003eInstead of exposing a field, you’ll be exposing \u003cem\u003eproperties\u003c/em\u003e. Property accessors can have logic in them, and that’s the beauty of encapsulation: you’re keeping a value to yourself, and telling the rest of the world only what it needs to know.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003ePolymorphism\u003c/h3\u003e\n\u003cp\u003eIf you’ve never worked with interfaces before, that one can be hard to grasp… but it’s the coolest thing to do in VBA, because it truly unlocks the OOP-ness of the language.\u003c/p\u003e\n\u003cp\u003eOnce, I implemented \u003cem\u003eIRepository \u003c/em\u003eand \u003cem\u003eIUnitOfWork \u003c/em\u003einterfaces in VBA. These interfaces allowed me to run my code using “fake” repositories and a “mock” unit of work, so I was able to develop a little CRUD application in Excel VBA, and test every single bit of functionality, without ever actually connecting to a database.\u003c/p\u003e\n\u003cp\u003eThat worked, because I wrote the code specifically to \u003cem\u003edepend on abstractions\u003c/em\u003e – an \u003cem\u003einterface \u003c/em\u003eis a wonderful abstraction. The code needed \u003cem\u003esomething \u003c/em\u003ethat had the CRUD methods needed to operate on the database tables: it didn’t care whether that \u003cem\u003ething \u003c/em\u003eused table A or table B – that’s an implementation detail!\u003c/p\u003e\n\u003cp\u003eThe ability of an object to take many forms, is called \u003cem\u003epolymorphism\u003c/em\u003e. When code works against an \u003cem\u003eIRepository \u003c/em\u003eobject rather than a \u003cem\u003eCustomerRepository\u003c/em\u003e, it doesn’t matter that the concrete implementation is actually a \u003cem\u003eProductRepository \u003c/em\u003eor a \u003cem\u003eCollectionBasedTestRepository.\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003eInheritance\u003c/h3\u003e\n\u003cp\u003eVBA doens’t have that, which is sometimes frustrating: the ability for a class to \u003cem\u003einherit \u003c/em\u003emembers from another class – when two classes relate to each other in an “is-a” manner, inheritance is at play.\u003c/p\u003e\n\u003cp\u003eYes, inheritance \u003cem\u003eis \u003c/em\u003eone of the 4 pillars of OOP, and \u003cem\u003ecomposition \u003c/em\u003eisn’t. But inheritance has its pros and cons, and in many situations composition has more pros than cons. Well, \u003cem\u003eclass inheritance\u003c/em\u003e at least, but in VBA \u003cem\u003eclass\u003c/em\u003e and \u003cem\u003einterface \u003c/em\u003einheritance would be intertwined anyway, because a VBA interface is nothing more than a class with empty members.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003eWhat of \u003cem\u003eComposition\u003c/em\u003e?\u003c/h3\u003e\n\u003cp\u003eIn VBA instead of saying that a class “is-a” something, we’ll say that the class “has-a” something. Subtle, but important difference: most languages that \u003cem\u003edo\u003c/em\u003e support inheritance only ever allow a given type to inherit from one, single class.\u003c/p\u003e\n\u003cp\u003eWhen an object encapsulates instances of other objects, it’s leveraging \u003cem\u003ecomposition\u003c/em\u003e. If you want, you can expose each member of the encapsulated object, and completely \u003cem\u003esimulate\u003c/em\u003e class inheritance.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2\u003eOk…\u003c/h2\u003e\n\u003ch3\u003e\u003cem\u003e…So, what does that have to do with Rubberduck?\u003c/em\u003e\u003c/h3\u003e\n\u003cp\u003eEverything. The Visual Basic Editor (VBE) isn’t really helping you to write Object-Oriented code. In fact, it’s almost encouraging you \u003cem\u003enot \u003c/em\u003eto.\u003c/p\u003e\n\u003cp\u003eThink of it:\u003c/p\u003e\n\u003cp\u003eThe only way to \u003cstrong\u003efind an identifier\u003c/strong\u003e in a project is to make a text search and \u003cstrong\u003eiterate the results one by one\u003c/strong\u003e, including the false results.\u003c/p\u003e\n\u003cp\u003eThe more classes and modules you have, \u003cstrong\u003ethe harder organizing your project becomes\u003c/strong\u003e. And when you realize you need some sort of naming scheme to more efficiently find something in the alphabetically-sorted \u003cem\u003eProject Explorer\u003c/em\u003e, \u003cstrong\u003eit’s too late to rename anything\u003c/strong\u003e without breaking everything.\u003c/p\u003e\n\u003cp\u003eSo people minimized the number of modules in their VBA projects, and wrote procedural code that can’t quite be tested because of the \u003cem\u003etight coupling \u003c/em\u003eand \u003cem\u003elow cohesion\u003c/em\u003e.\u003c/p\u003e\n\u003ch3\u003eTested?\u003c/h3\u003e\n\u003cp\u003eI don’t mean F5-debug “tested”; I mean automated tests that run a function 15 times with different input, tests that execute every line of application logic without popping a UI, hitting a database or the file system; tests that test \u003cem\u003eone thing\u003c/em\u003e, \u003cstrong\u003etests that \u003cem\u003edocument what the code is supposed to be doing\u003c/em\u003e\u003c/strong\u003e, tests that fail when the code changes and breaks existing functionality you thought was totally unrelated.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003eRubberduck loves OOP\u003c/h3\u003e\n\u003cp\u003eIt was already the case when the current v1.4.3 release was published, and the upcoming v2.0 release is going to confirm it: Rubberduck is a tool that helps you refactor legacy VBA code to OOP, and helps you write testable – \u003cstrong\u003eand tested\u003c/strong\u003e – object-oriented VBA code.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003eFind implementations\u003c/em\u003e feature is but an example of a wonderful object-oriented navigation tool: it locates and lets you browse all classes that implement a given interface. Or all members, wherever they are, that implement a given interface member.\u003c/p\u003e\n\u003cp\u003eIs OOP overkill for VBA? Sometimes. Depends what you need VBA for. But the IDE shouldn’t be what makes you second-guess whether it’s a good idea to push a language as far as it can go.\u003c/p\u003e\u003cbr\u003e  \u003ca rel\u003d\"nofollow\" href\u003d\"http://feeds.wordpress.com/1.0/gocomments/rubberduckvba.wordpress.com/140/\"\u003e\u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"http://feeds.wordpress.com/1.0/comments/rubberduckvba.wordpress.com/140/\"\u003e\u003c/a\u003e \u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"https://pixel.wp.com/b.gif?host\u003drubberduckvba.wordpress.com\u0026amp;blog\u003d86116679\u0026amp;post\u003d140\u0026amp;subd\u003drubberduckvba\u0026amp;ref\u003d\u0026amp;feed\u003d1\" width\u003d\"1\" height\u003d\"1\"\u003e","categories":["rubberduck","vba","add-in","oop","refactoring","v2.0","vba tools"]},{"mediaGroups":[{"contents":[{"url":"https://1.gravatar.com/avatar/a5013bc73b8dd1b7712d7e2a7a4feaea?s\u003d96\u0026d\u003didenticon\u0026r\u003dG","medium":"image","title":"rubberduckvba"}]}],"title":"Breaking Changes – Part 2: Rubberduck Menus","link":"https://rubberduckvba.wordpress.com/2015/11/17/breaking-changes-part-2-rubberduck-menus/","author":"rubberduckvba","publishedDate":"Mon, 16 Nov 2015 22:03:11 -0800","contentSnippet":"RUBBERDUCK 2.0 FLIPS EVERYTHING AROUND. When numbering versions, incrementing the “major” digit is reserved for breaking ...","content":"\u003ch3\u003e\u003cstrong\u003eRUBBERDUCK 2.0 FLIPS EVERYTHING AROUND\u003c/strong\u003e.\u003c/h3\u003e\n\u003cp\u003eWhen numbering versions, incrementing the “major” digit is reserved for \u003cem\u003ebreaking changes\u003c/em\u003e – and that’s exactly what Rubberduck 2.0 will introduce.\u003c/p\u003e\n\u003cp\u003eI have these changes in my own personal fork at the moment, not yet PR’d into the main repository.. but as more and more people fork the main repo I feel a need to go over some of the changes that are about to happen to the code base.\u003c/p\u003e\n\u003cp\u003eIf you’re wondering, it’s becoming clearer now, that Rubberduck 2.0 will not be released until another couple of months – at this rate we’re looking at something like the end of winter 2016… but it’s going to be worth the wait.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003eInversion of Control\u003c/h3\u003e\n\u003cp\u003eIn Rubberduck 1.x we had a class called \u003cstrong\u003eRubberduckMenu\u003c/strong\u003e, which was responsible for creating the add-in’s menu items. Then we had a \u003cstrong\u003eRefactorMenu\u003c/strong\u003e class, which was in theory responsible for creating the \u003cem\u003eRefactor\u003c/em\u003e sub-menu under the main Rubberduck menu and in the code pane context menu. As more and more features were added, these classes became cluttered with more and more responsibilities, and it became clear that we needed a more maintainable way of implementing this, in a way that wouldn’t require us to modify a menu class whenever we needed to add a functionality.\u003c/p\u003e\n\u003cp\u003eIn the Rubberduck 2.0 code base, \u003cstrong\u003eRubberduckMenu \u003c/strong\u003eand \u003cstrong\u003eRefactorMenu\u003c/strong\u003e (and every other “Menu” class) is deprecated, and all the per-functionality code is being moved into dedicated “Command” classes. For now everything is living in the \u003cem\u003eRubberduck.UI.Command\u003c/em\u003e namespace – we’ll eventually clean that up, but the beauty here is that adding a new menu item amounts to simply \u003cem\u003eimplementing the new functionality; \u003c/em\u003etake the \u003cstrong\u003eTestExplorerCommand\u003c/strong\u003e for example:\u003c/p\u003e\n\u003cpre\u003epublic class TestExplorerCommand : CommandBase\n{\n    private readonly IPresenter _presenter;\n    public TestExplorerCommand(IPresenter presenter)\n    {\n        _presenter \u003d presenter;\n    }\n\n    public override void Execute(object parameter)\n    {\n        _presenter.Show();\n    }\n}\u003c/pre\u003e\n\u003cp\u003eReally, that’s all there is to it. The “Test Explorer” menu item is even simpler:\u003c/p\u003e\n\u003cpre\u003epublic class TestExplorerCommandMenuItem : CommandMenuItemBase\n{\n    public TestExplorerCommandMenuItem(ICommand command)\n        : base(command)\n    {\n    }\n\n    public override string Key { get { return \"TestMenu_TextExplorer\"; }}\n    public override int DisplayOrder { get { return (int)UnitTestingMenuItemDisplayOrder.TestExplorer; } }\n}\u003c/pre\u003e\n\u003cp\u003eThe IoC container (Ninject) knows to inject a \u003cem\u003eTestExplorerCommand \u003c/em\u003efor this \u003cem\u003eICommand\u003c/em\u003e constructor parameter, merely by a naming convention (and a bit of reflection magic); the \u003ci\u003eKey \u003c/i\u003eproperty is used for fetching the localized resource – this means Rubberduck 2.0 will no longer need to re-construct the entire application when the user changes the display language in the options dialog: we simply call the parent menu’s \u003ci\u003eLocalize\u003c/i\u003e method, and all captions get updated to the selected language. …and modifying the \u003cem\u003edisplay order \u003c/em\u003eof menu items is now as trivial as changing the order of enum members:\u003c/p\u003e\n\u003cpre\u003epublic enum UnitTestingMenuItemDisplayOrder\n{\n    TestExplorer,\n    RunAllTests,\n    AddTestModule,\n    AddTestMethod,\n    AddTestMethodExpectedError\n}\u003c/pre\u003e\n\u003cp\u003eThe “downside” is that the code that initializes all the menu items has been moved to a dedicated Ninject module (\u003cem\u003eCommandbarsModule\u003c/em\u003e), and relies quite heavily on reflection and naming conventions… which can make things appear “automagic” to someone new to the code base or unfamiliar with \u003cem\u003eDependency Injection\u003c/em\u003e. For example, \u003cem\u003eICommand \u003c/em\u003eis automatically bound to \u003cem\u003e\u003cstrong\u003eFooCommand\u003c/strong\u003e \u003c/em\u003ewhen it is requested in the constructor of \u003cem\u003e\u003cstrong\u003eFooCommand\u003c/strong\u003eMenuItem\u003c/em\u003e, and we now have dedicated methods for setting up which \u003cem\u003eIMenuItem\u003c/em\u003e objects appear under each “parent menu”:\u003c/p\u003e\n\u003cpre\u003eprivate IMenuItem GetRefactoringsParentMenu()\n{\n    var items \u003d new IMenuItem[]\n    {\n        _kernel.Get\u0026lt;RefactorRenameCommandMenuItem\u0026gt;(),\n        _kernel.Get\u0026lt;RefactorExtractMethodCommandMenuItem\u0026gt;(),\n        _kernel.Get\u0026lt;RefactorReorderParametersCommandMenuItem\u0026gt;(),\n        _kernel.Get\u0026lt;RefactorRemoveParametersCommandMenuItem\u0026gt;(),\n    };\n    return new RefactoringsParentMenu(items);\n}\u003c/pre\u003e\n\u003cp\u003eThe end result, is that instead of creating menus in the VBE’s commandbars and handling their click events in the same place, we’ve now completely split a number of responsibilities into different types, so that the \u003cem\u003eApp\u003c/em\u003e class can now be injected with a very clean \u003cem\u003eAppMenu \u003c/em\u003eobject:\u003c/p\u003e\n\u003cpre\u003epublic class AppMenu : IAppMenu\n{\n    private readonly IEnumerable\u0026lt;IParentMenuItem\u0026gt; _menus;\n\n    public AppMenu(IEnumerable\u0026lt;IParentMenuItem\u0026gt; menus)\n    {\n        _menus \u003d menus;\n    }\n\n    public void Initialize()\n    {\n        foreach (var menu in _menus)\n        {\n            menu.Initialize();\n        }\n    }\n\n    public void EvaluateCanExecute(RubberduckParserState state)\n    {\n        foreach (var menu in _menus)\n        {\n            menu.EvaluateCanExecute(state);\n        }\n    }\n\n    public void Localize()\n    {\n        foreach (var menu in _menus)\n        {\n            menu.Localize();\n        }\n    }\n}\u003c/pre\u003e\n\u003cp\u003eThese changes, as welcome as they are, have basically broken the entire application… for the Greater Good. Rubberduck 2.0 will be unspeakably easier to maintain and extend.\u003c/p\u003e\n\u003ch5\u003e\u003cstrong\u003eTo be continued…\u003c/strong\u003e\u003c/h5\u003e\u003cbr\u003e  \u003ca rel\u003d\"nofollow\" href\u003d\"http://feeds.wordpress.com/1.0/gocomments/rubberduckvba.wordpress.com/132/\"\u003e\u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"http://feeds.wordpress.com/1.0/comments/rubberduckvba.wordpress.com/132/\"\u003e\u003c/a\u003e \u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"https://pixel.wp.com/b.gif?host\u003drubberduckvba.wordpress.com\u0026amp;blog\u003d86116679\u0026amp;post\u003d132\u0026amp;subd\u003drubberduckvba\u0026amp;ref\u003d\u0026amp;feed\u003d1\" width\u003d\"1\" height\u003d\"1\"\u003e","categories":["open-source","rubberduck","add-in","c#","v2.0"]},{"mediaGroups":[{"contents":[{"url":"https://1.gravatar.com/avatar/a5013bc73b8dd1b7712d7e2a7a4feaea?s\u003d96\u0026d\u003didenticon\u0026r\u003dG","medium":"image","title":"rubberduckvba"}]}],"title":"Breaking Changes – Part 1: Parser","link":"https://rubberduckvba.wordpress.com/2015/11/09/breaking-changes-part-1/","author":"rubberduckvba","publishedDate":"Mon, 09 Nov 2015 12:13:56 -0800","contentSnippet":"Rubberduck 2.0 flips everything around. When numbering versions, incrementing the \u0026#8220;major\u0026#8221; digit is reserved ...","content":"\u003ch3\u003e\u003cstrong\u003eRubberduck 2.0 flips everything around\u003c/strong\u003e.\u003c/h3\u003e\n\u003cp\u003eWhen numbering versions, incrementing the “major” digit is reserved for \u003cem\u003ebreaking changes\u003c/em\u003e – and that’s exactly what Rubberduck 2.0 will introduce.\u003c/p\u003e\n\u003cp\u003eI have these changes in my own personal fork at the moment, not yet PR’d into the main repository.. but as more and more people fork the main repo I feel a need to go over some of the changes that are about to happen to the code base.\u003c/p\u003e\n\u003cp\u003eIf you’re wondering, it’s becoming clearer now, that Rubberduck 2.0 will not be released until another couple of months – at this rate we’re looking at something like the end of winter 2016… but it’s going to be worth the wait.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e \u003c/p\u003e\n\u003ch3\u003e\u003c/h3\u003e\n\u003ch3\u003eParser State\u003c/h3\u003e\n\u003cp\u003eParsing in Rubberduck 1.x was relatively simple:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUser clicks on a command that requires a fresh parse tree;\u003c/li\u003e\n\u003cli\u003eParser knows which modules have been modified since the last parse, so only the modified modules are processed by the ANTLR parser;\u003c/li\u003e\n\u003cli\u003eOnce we have a parse tree and a set of \u003cstrong\u003eDeclaration\u003c/strong\u003e objects for everything (modules, procedures, variables, etc.), we resolve the identifier usages we encounter as we walk the parse tree again, to one of these declarations;\u003c/li\u003e\n\u003cli\u003eOnce identifier resolution is completed, the command can run.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe parse results were cached, so that if the \u003cem\u003eCode Explorer \u003c/em\u003eprocessed the entire code base to show up, and then the user wanted to run \u003cem\u003ecode inspections\u003c/em\u003e or one of the \u003cem\u003erefactor \u003c/em\u003ecommands, they could be reused as long as none of the modules were modified.\u003c/p\u003e\n\u003cp\u003eParsing in Rubberduck 2.0 flips this around and completely centralizes the parser state, which means the commands that require a fresh parse tree can be disabled until a fresh parse tree is available.\u003c/p\u003e\n\u003cp\u003eWe’ve implemented a \u003cem\u003ekey hook\u003c/em\u003e that tells the parser whenever the user has pressed a key that’s changed the content of the active code pane. When the 2.0 parser receives this message, it cancels the parse task (wherever it’s at) for that module, and starts it over; anytime there’s a “ready” parse tree for all modules, the expensive identifier resolution step begins in the background – and once that step completes, the parser sends a message to whoever is listening, essentially saying “If you ever need to analyze some code, I have everything you need right here”.\u003c/p\u003e\n\u003ch4\u003e\u003cstrong\u003eSounds great! So… What does it mean?\u003c/strong\u003e\u003c/h4\u003e\n\u003cp\u003eIt means the \u003cem\u003eCode Explorer \u003c/em\u003eand \u003ci\u003eFind Symbol \u003c/i\u003efeatures no longer need to trigger a parse, and no longer need to even wait for identifier resolution to complete before they can do their thing.\u003c/p\u003e\n\u003cp\u003eIt means \u003cem\u003eno feature \u003c/em\u003eever needs to trigger a parse anymore, and Rubberduck will be able to disable the relevant menu commands until parser state is ready to handle what you want to do, like \u003cem\u003erefactor/rename,\u003c/em\u003e \u003cem\u003efind all references \u003c/em\u003eor \u003cem\u003ego to implementation\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIt means despite the VBE not having a status bar, we can (read: will) use a \u003cem\u003ecommand bar\u003c/em\u003e to display the current parser state \u003cem\u003ein real-time\u003c/em\u003e (as you type!), and let you click that parser state command button to expand the parser/resolver progress and see exactly what little ducky’s working on in the background.\u003c/p\u003e\n\u003chr\u003e\n\u003ch5\u003eTo be continued…\u003c/h5\u003e\u003cbr\u003e  \u003ca rel\u003d\"nofollow\" href\u003d\"http://feeds.wordpress.com/1.0/gocomments/rubberduckvba.wordpress.com/133/\"\u003e\u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"http://feeds.wordpress.com/1.0/comments/rubberduckvba.wordpress.com/133/\"\u003e\u003c/a\u003e \u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"https://pixel.wp.com/b.gif?host\u003drubberduckvba.wordpress.com\u0026amp;blog\u003d86116679\u0026amp;post\u003d133\u0026amp;subd\u003drubberduckvba\u0026amp;ref\u003d\u0026amp;feed\u003d1\" width\u003d\"1\" height\u003d\"1\"\u003e","categories":["announcement","open-source","rubberduck","asynchronous","github","identifier resolution","parsing","v2.0","vba tools","vbe"]},{"mediaGroups":[{"contents":[{"url":"https://1.gravatar.com/avatar/a5013bc73b8dd1b7712d7e2a7a4feaea?s\u003d96\u0026d\u003didenticon\u0026r\u003dG","medium":"image","title":"rubberduckvba"},{"url":"https://rubberduckvba.files.wordpress.com/2015/09/rd-code-inspections.png?w\u003d300","medium":"image","title":"rd-code-inspections"},{"url":"http://i.stack.imgur.com/qaO8M.png","medium":"image"}]}],"title":"VariableNotUsedInspection: the false positives of v1.4, upcoming fixes of v2.0","link":"https://rubberduckvba.wordpress.com/2015/09/30/variablenotusedinspection-the-false-positives-of-v1-4-upcoming-fixes-of-v2-0/","author":"rubberduckvba","publishedDate":"Wed, 30 Sep 2015 10:54:09 -0700","contentSnippet":"One of my favorite features since we started working on this project, is the Code Inspections. I like it because, well, ...","content":"\u003cp\u003eOne of my favorite features since we started working on this project, is the \u003cstrong\u003eCode Inspections\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://rubberduckvba.files.wordpress.com/2015/09/rd-code-inspections.png\"\u003e\u003cimg src\u003d\"https://rubberduckvba.files.wordpress.com/2015/09/rd-code-inspections.png?w\u003d582\u0026amp;h\u003d221\" alt\u003d\"rd-code-inspections\" width\u003d\"582\" height\u003d\"221\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI like it because, well, it \u003cem\u003edoes \u003c/em\u003efind things.\u003c/p\u003e\n\u003cp\u003eThe problem is that, sometimes, under specific circumstances, it makes false claims. Take this code for example:\u003c/p\u003e\n\u003cpre\u003ePublic Sub FormatChart(cht As ChartObject)\n    Dim ax As Axis\n    Set ax \u003d cht.Axes(xlValue)\n    ax.MajorGridlines.Border.Color \u003d RGB(200, 200, 200)\n    ax.MinorGridlines.Border.Color \u003d RGB(230, 230, 230)\n    ax.Crosses \u003d xlAxisCrossesMinimum\nEnd Sub\u003c/pre\u003e\n\u003cp\u003eHere Rubberduck 1.4.3 would say “Variable ‘ax’ is never used” – and suggest a quick-fix to remove the supposedly unused declaration. A quick-fix which, of course, would break the code. Is there a bug in the \u003cem\u003eVariableNotUsedInspection\u003c/em\u003e code?\u003c/p\u003e\n\u003cp\u003eBelieve it or not, there isn’t. What makes the inspection fire up false positives, is a bug in the \u003ci\u003eidentifier reference resolver \u003c/i\u003ethat causes \u003cem\u003emember calls \u003c/em\u003eto ignore the “parent” reference.\u003c/p\u003e\n\u003cp\u003eAnother common case, is caused by – again – the resolver treating \u003cem\u003eFor \u003c/em\u003eand \u003cem\u003eFor Each \u003c/em\u003eloops as \u003cem\u003eassignments\u003c/em\u003e, but not as \u003cem\u003eusages\u003c/em\u003e. So in code like this:\u003c/p\u003e\n\u003cpre\u003e Dim fYear As Integer\n Dim fQuarterOfYear As Integer\n Dim fMonthOfQuarter As Integer\n Dim fWeekOfMonth As Integer\n Dim fDayOfWeek As Integer\n \n For fYear \u003d fStartYear To fStartYear + years - 1\n     Set current \u003d FiscalCalendarDate.Create(currentDate, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, fYear, vbNullString)\n \n     For fQuarterOfYear \u003d 1 To 4\n \n         current.FiscalDayOfQuarter \u003d 1\n         current.FiscalWeekOfQuarter \u003d 1\n         current.FiscalMonthOfQuarter \u003d 1\n \n         For fMonthOfQuarter \u003d 1 To 3\n \n             current.FiscalDayOfMonth \u003d 1\n             current.FiscalWeekOfMonth \u003d 1\n \n             If IIf(IsLeapYear(current.calendarYear) And current.FiscalMonthOfYear \u003d 12, True, fMonthOfQuarter Mod 2 \u003d 0) Then\n \n                 For fWeekOfMonth \u003d 1 To 5\n ...\u003c/pre\u003e\n\u003cp\u003eYou get a “Variable ‘fWeekOfMonth’ is not used” and “Variable ‘fQuarterOfYear’ is not used”, because the only place they’re ever used is in \u003cem\u003eFor \u003c/em\u003eloops.\u003c/p\u003e\n\u003cp\u003eThen you have the \u003cem\u003eforgotten edge cases\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003ePrivate WithEvents indicator As ProgressIndicator\u003c/pre\u003e\n\u003cp\u003e\u003cem\u003eWithEvents \u003c/em\u003evariables are likely to be assigned a reference, but not necessarily to be themselves referenced anywhere. And if they aren’t, well then, they’re reported as “never used”. Which is a problem, because you don’t want a quick-fix to go and delete the \u003cem\u003eWithEvents \u003c/em\u003edeclaration that provides all these events you’re handling. So we’re going to be ignoring \u003cem\u003eWithEvents \u003c/em\u003evariables.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3\u003eOkay… Got any \u003cem\u003eGood\u003c/em\u003e news?\u003c/h3\u003e\n\u003cp\u003eTotally. Ducky 2.0 code inspections are being completely revamped. And all these false positives are being addressed, which means…\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://i1.wp.com/i.stack.imgur.com/qaO8M.png\" alt\u003d\"\" width\u003d\"352\" height\u003d\"387\"\u003e\u003c/p\u003e\n\u003cp\u003e…most inspections will support “Fix all” options. Of course one shouldn’t “fix all occurrences in project” without \u003cem\u003eactually\u003c/em\u003e reviewing the inspection results. But so far, it’s looking very, very good. This UI is still preliminary: we’re happy to hear (and integrate) your feedback!\u003c/p\u003e\u003cbr\u003e  \u003ca rel\u003d\"nofollow\" href\u003d\"http://feeds.wordpress.com/1.0/gocomments/rubberduckvba.wordpress.com/128/\"\u003e\u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"http://feeds.wordpress.com/1.0/comments/rubberduckvba.wordpress.com/128/\"\u003e\u003c/a\u003e \u003cimg alt\u003d\"\" border\u003d\"0\" src\u003d\"https://pixel.wp.com/b.gif?host\u003drubberduckvba.wordpress.com\u0026amp;blog\u003d86116679\u0026amp;post\u003d128\u0026amp;subd\u003drubberduckvba\u0026amp;ref\u003d\u0026amp;feed\u003d1\" width\u003d\"1\" height\u003d\"1\"\u003e","categories":["rubberduck","vba","bug","code-inspections","identifier resolution"]}]}}, 200, null, 200)